// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/notification_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { OlvidClient, notifications, datatypes } from '@olvid/bot-node';
import type { ITriggerFunctions } from 'n8n-workflow';

export function messageReceived(this: ITriggerFunctions, client: OlvidClient, onCallback?: Function, returnMockData: boolean = false): Function {
    if (returnMockData) {
        this.emit([this.helpers.returnJsonArray([{
// message.mockData
        }])]);
        onCallback?.();
        return () => {};
    }

	const callback = (notification: notifications.MessageReceivedNotification) => {
		this.emit([this.helpers.returnJsonArray({id: {type: datatypes.MessageId_Type[notification?.message?.id?.type ?? 0], id: Number(notification?.message?.id?.id)}, discussionId: Number(notification?.message?.discussionId), senderId: Number(notification?.message?.senderId), body: notification?.message?.body, sortIndex: notification?.message?.sortIndex, timestamp: Number(notification?.message?.timestamp), attachmentsCount: Number(notification?.message?.attachmentsCount), repliedMessageId: {type: datatypes.MessageId_Type[notification?.message?.repliedMessageId?.type ?? 0], id: Number(notification?.message?.repliedMessageId?.id)}, messageLocation: {type: datatypes.MessageLocation_LocationType[notification?.message?.messageLocation?.type ?? 0], timestamp: Number(notification?.message?.messageLocation?.timestamp), latitude: notification?.message?.messageLocation?.latitude, longitude: notification?.message?.messageLocation?.longitude, altitude: notification?.message?.messageLocation?.altitude, precision: notification?.message?.messageLocation?.precision, address: notification?.message?.messageLocation?.address}, reactions: notification?.message?.reactions.map(e => ({contactId: Number(e.contactId), reaction: e.reaction, timestamp: Number(e.timestamp)})), forwarded: notification?.message?.forwarded, editedBody: notification?.message?.editedBody})]);
		onCallback?.();
	}

	return client.stubs.messageNotificationStub.messageReceived({}, callback, () => {});
}
