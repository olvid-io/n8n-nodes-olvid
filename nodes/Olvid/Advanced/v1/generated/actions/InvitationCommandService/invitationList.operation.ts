// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Filter',
    name: 'filter',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Filter | Status',
        name: 'status',
        type: 'options',

        options: [
          { name: 'STATUS_UNSPECIFIED', value: 'STATUS_UNSPECIFIED' },
          { name: 'STATUS_INVITATION_WAIT_YOU_TO_ACCEPT', value: 'STATUS_INVITATION_WAIT_YOU_TO_ACCEPT' },
          { name: 'STATUS_INVITATION_WAIT_IT_TO_ACCEPT', value: 'STATUS_INVITATION_WAIT_IT_TO_ACCEPT' },
          { name: 'STATUS_INVITATION_STATUS_IN_PROGRESS', value: 'STATUS_INVITATION_STATUS_IN_PROGRESS' },
          { name: 'STATUS_INVITATION_WAIT_YOU_FOR_SAS_EXCHANGE', value: 'STATUS_INVITATION_WAIT_YOU_FOR_SAS_EXCHANGE' },
          { name: 'STATUS_INVITATION_WAIT_IT_FOR_SAS_EXCHANGE', value: 'STATUS_INVITATION_WAIT_IT_FOR_SAS_EXCHANGE' },
          { name: 'STATUS_INTRODUCTION_WAIT_IT_TO_ACCEPT', value: 'STATUS_INTRODUCTION_WAIT_IT_TO_ACCEPT' },
          { name: 'STATUS_INTRODUCTION_WAIT_YOU_TO_ACCEPT', value: 'STATUS_INTRODUCTION_WAIT_YOU_TO_ACCEPT' },
          { name: 'STATUS_ONE_TO_ONE_INVITATION_WAIT_IT_TO_ACCEPT', value: 'STATUS_ONE_TO_ONE_INVITATION_WAIT_IT_TO_ACCEPT' },
          { name: 'STATUS_ONE_TO_ONE_INVITATION_WAIT_YOU_TO_ACCEPT', value: 'STATUS_ONE_TO_ONE_INVITATION_WAIT_YOU_TO_ACCEPT' },
          { name: 'STATUS_GROUP_INVITATION_WAIT_YOU_TO_ACCEPT', value: 'STATUS_GROUP_INVITATION_WAIT_YOU_TO_ACCEPT' },
          { name: 'STATUS_GROUP_INVITATION_FROZEN', value: 'STATUS_GROUP_INVITATION_FROZEN' },
        ],
        default: 'STATUS_UNSPECIFIED',
      },
      {
        displayName: 'Filter | Type',
        name: 'type',
        type: 'options',

        options: [
          { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
          { name: 'TYPE_INVITATION', value: 'TYPE_INVITATION' },
          { name: 'TYPE_INTRODUCTION', value: 'TYPE_INTRODUCTION' },
          { name: 'TYPE_GROUP', value: 'TYPE_GROUP' },
          { name: 'TYPE_ONE_TO_ONE', value: 'TYPE_ONE_TO_ONE' },
        ],
        default: 'TYPE_UNSPECIFIED',
      },
      {
        displayName: 'Filter | DisplayNameSearch',
        name: 'displayNameSearch',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Filter | MinTimestamp',
        name: 'minTimestamp',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Filter | MaxTimestamp',
        name: 'maxTimestamp',
        type: 'number',


        default: 0,
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['InvitationCommandService'],
    operation: ['InvitationList'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getFilter(this: IExecuteFunctions, index: number): datatypes.InvitationFilter | undefined {
        const itemFilter = this.getNodeParameter('filter', index) as IDataObject | undefined;
        if (itemFilter === undefined) {
            return undefined;
        }
        function getStatus(this: IExecuteFunctions, itemInvitationFilter: IDataObject): datatypes.Invitation_Status | undefined {
            const value: string | number | undefined = itemInvitationFilter['status'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.Invitation_Status [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.Invitation_Status;
            }
            else {
                const enumKey = value.replace("STATUS_", "");
                return datatypes.Invitation_Status [enumKey as keyof typeof datatypes.Invitation_Status];
            }
        }
        const status: datatypes.Invitation_Status | undefined = getStatus.call(this, itemFilter);
        function getType(this: IExecuteFunctions, itemInvitationFilter: IDataObject): datatypes.InvitationFilter_Type | undefined {
            const value: string | number | undefined = itemInvitationFilter['type'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.InvitationFilter_Type [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.InvitationFilter_Type;
            }
            else {
                const enumKey = value.replace("TYPE_", "");
                return datatypes.InvitationFilter_Type [enumKey as keyof typeof datatypes.InvitationFilter_Type];
            }
        }
        const type: datatypes.InvitationFilter_Type | undefined = getType.call(this, itemFilter);
        const displayNameSearch: string | undefined = itemFilter['displayNameSearch'] ? itemFilter['displayNameSearch'] as string : undefined;
        const minTimestamp: bigint | undefined = itemFilter['minTimestamp'] ? BigInt(itemFilter['minTimestamp'] as number) : undefined;
        const maxTimestamp: bigint | undefined = itemFilter['maxTimestamp'] ? BigInt(itemFilter['maxTimestamp'] as number) : undefined;
        return new datatypes.InvitationFilter({
            status,
            type,
            displayNameSearch,
            minTimestamp,
            maxTimestamp,
        });
    }
    const filter: datatypes.InvitationFilter | undefined = getFilter.call(this, index);

    const containerMessage: commands.InvitationListResponse = new commands.InvitationListResponse();
    for await (const message of client.stubs.invitationCommandStub.invitationList({filter})) {
        containerMessage.invitations.push(...message.invitations);
    }

    return this.helpers.returnJsonArray(containerMessage?.invitations.map(e => ({id: Number(e.id), status: datatypes.Invitation_Status[e.status ?? 0], displayName: e.displayName, timestamp: Number(e.timestamp), sas: e.sas}))
);
}
