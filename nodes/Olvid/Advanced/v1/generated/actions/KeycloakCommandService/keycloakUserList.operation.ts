// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Filter',
    name: 'filter',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Filter | Contact',
        name: 'contact',
        type: 'options',

        options: [
          { name: 'CONTACT_UNSPECIFIED', value: 'CONTACT_UNSPECIFIED' },
          { name: 'CONTACT_IS', value: 'CONTACT_IS' },
          { name: 'CONTACT_IS_NOT', value: 'CONTACT_IS_NOT' },
        ],
        default: 'CONTACT_UNSPECIFIED',
      },
      {
        displayName: 'Filter | DisplayNameSearch',
        name: 'displayNameSearch',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Filter | DetailsSearch',
        name: 'detailsSearch',
        type: 'collection',
        default: {
        },
        options: [
          {
            displayName: 'Filter | DetailsSearch| FirstName',
            name: 'firstName',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| LastName',
            name: 'lastName',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| Company',
            name: 'company',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| Position',
            name: 'position',
            type: 'string',


            default: '',
          },
        ],
      },
    ],
  },
  {
    displayName: 'LastListTimestamp',
    name: 'lastListTimestamp',
    type: 'number',
    required: false,

    default: 0,
  },
];

const displayOptions = {
  show: {
    resource: ['KeycloakCommandService'],
    operation: ['KeycloakUserList'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getFilter(this: IExecuteFunctions, index: number): datatypes.KeycloakUserFilter | undefined {
        const itemFilter = this.getNodeParameter('filter', index) as IDataObject | undefined;
        if (itemFilter === undefined) {
            return undefined;
        }
        function getContact(this: IExecuteFunctions, itemKeycloakUserFilter: IDataObject): datatypes.KeycloakUserFilter_Contact | undefined {
            const value: string | number | undefined = itemKeycloakUserFilter['contact'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.KeycloakUserFilter_Contact [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.KeycloakUserFilter_Contact;
            }
            else {
                const enumKey = value.replace("CONTACT_", "");
                return datatypes.KeycloakUserFilter_Contact [enumKey as keyof typeof datatypes.KeycloakUserFilter_Contact];
            }
        }
        const contact: datatypes.KeycloakUserFilter_Contact | undefined = getContact.call(this, itemFilter);
        const displayNameSearch: string | undefined = itemFilter['displayNameSearch'] ? itemFilter['displayNameSearch'] as string : undefined;
        function getDetailsSearch(this: IExecuteFunctions, itemKeycloakUserFilter: IDataObject): datatypes.IdentityDetails | undefined {
            const itemDetailsSearch = itemKeycloakUserFilter['detailsSearch'] as IDataObject | undefined;
            if (itemDetailsSearch === undefined) {
                return undefined;
            }
            const firstName: string | undefined = itemDetailsSearch['firstName'] ? itemDetailsSearch['firstName'] as string : undefined;
            const lastName: string | undefined = itemDetailsSearch['lastName'] ? itemDetailsSearch['lastName'] as string : undefined;
            const company: string | undefined = itemDetailsSearch['company'] ? itemDetailsSearch['company'] as string : undefined;
            const position: string | undefined = itemDetailsSearch['position'] ? itemDetailsSearch['position'] as string : undefined;
            return new datatypes.IdentityDetails({
                firstName,
                lastName,
                company,
                position,
            });
        }
        const detailsSearch: datatypes.IdentityDetails | undefined = getDetailsSearch.call(this, itemFilter);
        return new datatypes.KeycloakUserFilter({
            contact,
            displayNameSearch,
            detailsSearch,
        });
    }
    const filter: datatypes.KeycloakUserFilter | undefined = getFilter.call(this, index);
    const lastListTimestamp: bigint | undefined = this.getNodeParameter('lastListTimestamp', index) ? BigInt(this.getNodeParameter('lastListTimestamp', index) as number) : undefined;

    const containerMessage: commands.KeycloakUserListResponse = new commands.KeycloakUserListResponse();
    for await (const message of client.stubs.keycloakCommandStub.keycloakUserList({filter, lastListTimestamp})) {
        containerMessage.users.push(...message.users);
        containerMessage.lastListTimestamp = message.lastListTimestamp
    }

    return this.helpers.returnJsonArray([{users: containerMessage?.users.map(e => ({keycloakId: e.keycloakId, displayName: e.displayName, details: {firstName: e.details?.firstName, lastName: e.details?.lastName, company: e.details?.company, position: e.details?.position}, contactId: Number(e.contactId)}))
},{lastListTimestamp: Number(containerMessage?.lastListTimestamp)
}]);
}
