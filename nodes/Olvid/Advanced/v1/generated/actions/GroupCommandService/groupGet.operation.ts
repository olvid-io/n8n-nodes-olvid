// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'GroupId',
    name: 'groupId',
    type: 'number',
    required: true,

    default: 0,
  },
];

const displayOptions = {
  show: {
    resource: ['GroupCommandService'],
    operation: ['GroupGet'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    const groupId: bigint = BigInt(this.getNodeParameter('groupId', index) as number);
    const response: commands.GroupGetResponse = await client.stubs.groupCommandStub.groupGet({groupId});
    return this.helpers.returnJsonArray({id: Number(response?.group?.id), type: datatypes.Group_Type[response?.group?.type ?? 0], advancedConfiguration: {readOnly: response?.group?.advancedConfiguration?.readOnly, remoteDelete: datatypes.Group_AdvancedConfiguration_RemoteDelete[response?.group?.advancedConfiguration?.remoteDelete ?? 0]}, ownPermissions: {admin: response?.group?.ownPermissions?.admin, remoteDeleteAnything: response?.group?.ownPermissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: response?.group?.ownPermissions?.editOrRemoteDeleteOwnMessages, changeSettings: response?.group?.ownPermissions?.changeSettings, sendMessage: response?.group?.ownPermissions?.sendMessage}, members: response?.group?.members.map(e => ({contactId: Number(e.contactId), permissions: {admin: e.permissions?.admin, remoteDeleteAnything: e.permissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: e.permissions?.editOrRemoteDeleteOwnMessages, changeSettings: e.permissions?.changeSettings, sendMessage: e.permissions?.sendMessage}})), pendingMembers: response?.group?.pendingMembers.map(e => ({pendingMemberId: Number(e.pendingMemberId), contactId: Number(e.contactId), displayName: e.displayName, declined: e.declined, permissions: {admin: e.permissions?.admin, remoteDeleteAnything: e.permissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: e.permissions?.editOrRemoteDeleteOwnMessages, changeSettings: e.permissions?.changeSettings, sendMessage: e.permissions?.sendMessage}})), updateInProgress: response?.group?.updateInProgress, keycloakManaged: response?.group?.keycloakManaged, name: response?.group?.name, description: response?.group?.description, hasAPhoto: response?.group?.hasAPhoto});
}
