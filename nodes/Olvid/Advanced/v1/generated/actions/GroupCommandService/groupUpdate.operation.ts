// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Group',
    name: 'group',
    type: 'collection',
    default: {
      id: 0,
      type: 'TYPE_UNSPECIFIED',
      ownPermissions: '',
      members: '',
      pendingMembers: '',
      updateInProgress: false,
      keycloakManaged: false,
      name: '',
      description: '',
      hasAPhoto: false,
    },
    options: [
      {
        displayName: 'Group | Id',
        name: 'id',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Group | Type',
        name: 'type',
        type: 'options',

        options: [
          { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
          { name: 'TYPE_STANDARD', value: 'TYPE_STANDARD' },
          { name: 'TYPE_CONTROLLED', value: 'TYPE_CONTROLLED' },
          { name: 'TYPE_READ_ONLY', value: 'TYPE_READ_ONLY' },
          { name: 'TYPE_ADVANCED', value: 'TYPE_ADVANCED' },
        ],
        default: 'TYPE_UNSPECIFIED',
      },
      {
        displayName: 'Group | AdvancedConfiguration',
        name: 'advancedConfiguration',
        type: 'collection',
        default: {
        },
        options: [
          {
            displayName: 'Group | AdvancedConfiguration| ReadOnly',
            name: 'readOnly',
            type: 'boolean',


            default: false,
          },
          {
            displayName: 'Group | AdvancedConfiguration| RemoteDelete',
            name: 'remoteDelete',
            type: 'options',

            options: [
              { name: 'REMOTE_DELETE_UNSPECIFIED', value: 'REMOTE_DELETE_UNSPECIFIED' },
              { name: 'REMOTE_DELETE_NOBODY', value: 'REMOTE_DELETE_NOBODY' },
              { name: 'REMOTE_DELETE_ADMINS', value: 'REMOTE_DELETE_ADMINS' },
              { name: 'REMOTE_DELETE_EVERYONE', value: 'REMOTE_DELETE_EVERYONE' },
            ],
            default: 'REMOTE_DELETE_UNSPECIFIED',
          },
        ],
      },
      {
        displayName: 'Group | OwnPermissions',
        name: 'ownPermissions',
        type: 'collection',
        default: {
          admin: false,
          remoteDeleteAnything: false,
          editOrRemoteDeleteOwnMessages: false,
          changeSettings: false,
          sendMessage: false,
        },
        options: [
          {
            displayName: 'Group | OwnPermissions| Admin',
            name: 'admin',
            type: 'boolean',


            default: false,
          },
          {
            displayName: 'Group | OwnPermissions| RemoteDeleteAnything',
            name: 'remoteDeleteAnything',
            type: 'boolean',


            default: false,
          },
          {
            displayName: 'Group | OwnPermissions| EditOrRemoteDeleteOwnMessages',
            name: 'editOrRemoteDeleteOwnMessages',
            type: 'boolean',


            default: false,
          },
          {
            displayName: 'Group | OwnPermissions| ChangeSettings',
            name: 'changeSettings',
            type: 'boolean',


            default: false,
          },
          {
            displayName: 'Group | OwnPermissions| SendMessage',
            name: 'sendMessage',
            type: 'boolean',


            default: false,
          },
        ],
      },
      {
        displayName: 'Group | Members - List',
        name: 'membersList',
        type: 'fixedCollection',
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'collection',
            displayName: 'Collection',
            values: [
              {
                displayName: 'Group | Members',
                name: 'members',
                type: 'collection',
                default: {
                  contactId: 0,
                  permissions: '',
                },
                options: [
                  {
                    displayName: 'Group | Members| ContactId',
                    name: 'contactId',
                    type: 'number',


                    default: 0,
                  },
                  {
                    displayName: 'Group | Members| Permissions',
                    name: 'permissions',
                    type: 'collection',
                    default: {
                      admin: false,
                      remoteDeleteAnything: false,
                      editOrRemoteDeleteOwnMessages: false,
                      changeSettings: false,
                      sendMessage: false,
                    },
                    options: [
                      {
                        displayName: 'Group | Members| Permissions| Admin',
                        name: 'admin',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | Members| Permissions| RemoteDeleteAnything',
                        name: 'remoteDeleteAnything',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | Members| Permissions| EditOrRemoteDeleteOwnMessages',
                        name: 'editOrRemoteDeleteOwnMessages',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | Members| Permissions| ChangeSettings',
                        name: 'changeSettings',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | Members| Permissions| SendMessage',
                        name: 'sendMessage',
                        type: 'boolean',


                        default: false,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        displayName: 'Group | PendingMembers - List',
        name: 'pendingMembersList',
        type: 'fixedCollection',
        typeOptions: {
          multipleValues: true,
        },
        default: {},
        options: [
          {
            name: 'collection',
            displayName: 'Collection',
            values: [
              {
                displayName: 'Group | PendingMembers',
                name: 'pendingMembers',
                type: 'collection',
                default: {
                  pendingMemberId: 0,
                  contactId: 0,
                  displayName: '',
                  declined: false,
                  permissions: '',
                },
                options: [
                  {
                    displayName: 'Group | PendingMembers| PendingMemberId',
                    name: 'pendingMemberId',
                    type: 'number',


                    default: 0,
                  },
                  {
                    displayName: 'Group | PendingMembers| ContactId',
                    name: 'contactId',
                    type: 'number',


                    default: 0,
                  },
                  {
                    displayName: 'Group | PendingMembers| DisplayName',
                    name: 'displayName',
                    type: 'string',


                    default: '',
                  },
                  {
                    displayName: 'Group | PendingMembers| Declined',
                    name: 'declined',
                    type: 'boolean',


                    default: false,
                  },
                  {
                    displayName: 'Group | PendingMembers| Permissions',
                    name: 'permissions',
                    type: 'collection',
                    default: {
                      admin: false,
                      remoteDeleteAnything: false,
                      editOrRemoteDeleteOwnMessages: false,
                      changeSettings: false,
                      sendMessage: false,
                    },
                    options: [
                      {
                        displayName: 'Group | PendingMembers| Permissions| Admin',
                        name: 'admin',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | PendingMembers| Permissions| RemoteDeleteAnything',
                        name: 'remoteDeleteAnything',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | PendingMembers| Permissions| EditOrRemoteDeleteOwnMessages',
                        name: 'editOrRemoteDeleteOwnMessages',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | PendingMembers| Permissions| ChangeSettings',
                        name: 'changeSettings',
                        type: 'boolean',


                        default: false,
                      },
                      {
                        displayName: 'Group | PendingMembers| Permissions| SendMessage',
                        name: 'sendMessage',
                        type: 'boolean',


                        default: false,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        displayName: 'Group | UpdateInProgress',
        name: 'updateInProgress',
        type: 'boolean',


        default: false,
      },
      {
        displayName: 'Group | KeycloakManaged',
        name: 'keycloakManaged',
        type: 'boolean',


        default: false,
      },
      {
        displayName: 'Group | Name',
        name: 'name',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Group | Description',
        name: 'description',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Group | HasAPhoto',
        name: 'hasAPhoto',
        type: 'boolean',


        default: false,
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['GroupCommandService'],
    operation: ['GroupUpdate'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getGroup(this: IExecuteFunctions, index: number): datatypes.Group {
        const itemGroup = this.getNodeParameter('group', index) as IDataObject;
        const id: bigint = BigInt(itemGroup['id'] as number);
        function getType(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.Group_Type {
            const value: string | number = itemGroup['type'] as string | number;

            if (typeof value == 'number') {
                if (datatypes.Group_Type [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.Group_Type;
            }
            else {
                const enumKey = value.replace("TYPE_", "");
                return datatypes.Group_Type [enumKey as keyof typeof datatypes.Group_Type];
            }
        }
        const type: datatypes.Group_Type = getType.call(this, itemGroup);
        function getAdvancedConfiguration(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.Group_AdvancedConfiguration | undefined {
            const itemAdvancedConfiguration = itemGroup['advancedConfiguration'] as IDataObject | undefined;
            if (itemAdvancedConfiguration === undefined) {
                return undefined;
            }
            const readOnly: boolean | undefined = itemAdvancedConfiguration['readOnly'] ? itemAdvancedConfiguration['readOnly'] as boolean : undefined;
            function getRemoteDelete(this: IExecuteFunctions, itemAdvancedConfiguration: IDataObject): datatypes.Group_AdvancedConfiguration_RemoteDelete | undefined {
                const value: string | number | undefined = itemAdvancedConfiguration['remoteDelete'] as string | number | undefined;
                if (value === undefined) {
                    return undefined;
                }
                if (typeof value == 'number') {
                    if (datatypes.Group_AdvancedConfiguration_RemoteDelete [value] === undefined) {
                        throw new Error('The attachment type "${value}" is not known.');
                    }
                    return value as datatypes.Group_AdvancedConfiguration_RemoteDelete;
                }
                else {
                    const enumKey = value.replace("REMOTEDELETE_", "");
                    return datatypes.Group_AdvancedConfiguration_RemoteDelete [enumKey as keyof typeof datatypes.Group_AdvancedConfiguration_RemoteDelete];
                }
            }
            const remoteDelete: datatypes.Group_AdvancedConfiguration_RemoteDelete | undefined = getRemoteDelete.call(this, itemAdvancedConfiguration);
            return new datatypes.Group_AdvancedConfiguration({
                readOnly,
                remoteDelete,
            });
        }
        const advancedConfiguration: datatypes.Group_AdvancedConfiguration | undefined = getAdvancedConfiguration.call(this, itemGroup);
        function getOwnPermissions(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.GroupMemberPermissions {
            const itemOwnPermissions = itemGroup['ownPermissions'] as IDataObject;
            const admin: boolean = itemOwnPermissions['admin'] as boolean;
            const remoteDeleteAnything: boolean = itemOwnPermissions['remoteDeleteAnything'] as boolean;
            const editOrRemoteDeleteOwnMessages: boolean = itemOwnPermissions['editOrRemoteDeleteOwnMessages'] as boolean;
            const changeSettings: boolean = itemOwnPermissions['changeSettings'] as boolean;
            const sendMessage: boolean = itemOwnPermissions['sendMessage'] as boolean;
            return new datatypes.GroupMemberPermissions({
                admin,
                remoteDeleteAnything,
                editOrRemoteDeleteOwnMessages,
                changeSettings,
                sendMessage,
            });
        }
        const ownPermissions: datatypes.GroupMemberPermissions = getOwnPermissions.call(this, itemGroup);
        function getMembers(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.GroupMember[] {
            function getMembers(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.GroupMember {
                const itemMembers = itemGroup['members'] as IDataObject;
                const contactId: bigint = BigInt(itemMembers['contactId'] as number);
                function getPermissions(this: IExecuteFunctions, itemGroupMember: IDataObject): datatypes.GroupMemberPermissions {
                    const itemPermissions = itemGroupMember['permissions'] as IDataObject;
                    const admin: boolean = itemPermissions['admin'] as boolean;
                    const remoteDeleteAnything: boolean = itemPermissions['remoteDeleteAnything'] as boolean;
                    const editOrRemoteDeleteOwnMessages: boolean = itemPermissions['editOrRemoteDeleteOwnMessages'] as boolean;
                    const changeSettings: boolean = itemPermissions['changeSettings'] as boolean;
                    const sendMessage: boolean = itemPermissions['sendMessage'] as boolean;
                    return new datatypes.GroupMemberPermissions({
                        admin,
                        remoteDeleteAnything,
                        editOrRemoteDeleteOwnMessages,
                        changeSettings,
                        sendMessage,
                    });
                }
                const permissions: datatypes.GroupMemberPermissions = getPermissions.call(this, itemMembers);
                return new datatypes.GroupMember({
                    contactId,
                    permissions,
                });
            }
            const membersCollectionParent: IDataObject | undefined = itemGroup['membersList'] as IDataObject | undefined;
            if (membersCollectionParent === undefined) {
                return [];
            }
            const membersCollection: IDataObject[] | undefined = membersCollectionParent['collection'] as IDataObject[] | undefined;
            if (membersCollection === undefined) {
                return [];
            }
            const membersList: datatypes.GroupMember[] = [];
            for (const itemMembers of membersCollection) {
                const members: datatypes.GroupMember = getMembers.call(this, itemMembers);
                membersList.push(members);
            }
            return membersList;
        }
        const members: datatypes.GroupMember[] = getMembers.call(this, itemGroup);
        function getPendingMembers(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.PendingGroupMember[] {
            function getPendingMembers(this: IExecuteFunctions, itemGroup: IDataObject): datatypes.PendingGroupMember {
                const itemPendingMembers = itemGroup['pendingMembers'] as IDataObject;
                const pendingMemberId: bigint = BigInt(itemPendingMembers['pendingMemberId'] as number);
                const contactId: bigint = BigInt(itemPendingMembers['contactId'] as number);
                const displayName: string = itemPendingMembers['displayName'] as string;
                const declined: boolean = itemPendingMembers['declined'] as boolean;
                function getPermissions(this: IExecuteFunctions, itemPendingGroupMember: IDataObject): datatypes.GroupMemberPermissions {
                    const itemPermissions = itemPendingGroupMember['permissions'] as IDataObject;
                    const admin: boolean = itemPermissions['admin'] as boolean;
                    const remoteDeleteAnything: boolean = itemPermissions['remoteDeleteAnything'] as boolean;
                    const editOrRemoteDeleteOwnMessages: boolean = itemPermissions['editOrRemoteDeleteOwnMessages'] as boolean;
                    const changeSettings: boolean = itemPermissions['changeSettings'] as boolean;
                    const sendMessage: boolean = itemPermissions['sendMessage'] as boolean;
                    return new datatypes.GroupMemberPermissions({
                        admin,
                        remoteDeleteAnything,
                        editOrRemoteDeleteOwnMessages,
                        changeSettings,
                        sendMessage,
                    });
                }
                const permissions: datatypes.GroupMemberPermissions = getPermissions.call(this, itemPendingMembers);
                return new datatypes.PendingGroupMember({
                    pendingMemberId,
                    contactId,
                    displayName,
                    declined,
                    permissions,
                });
            }
            const pendingMembersCollectionParent: IDataObject | undefined = itemGroup['pendingMembersList'] as IDataObject | undefined;
            if (pendingMembersCollectionParent === undefined) {
                return [];
            }
            const pendingMembersCollection: IDataObject[] | undefined = pendingMembersCollectionParent['collection'] as IDataObject[] | undefined;
            if (pendingMembersCollection === undefined) {
                return [];
            }
            const pendingMembersList: datatypes.PendingGroupMember[] = [];
            for (const itemPendingMembers of pendingMembersCollection) {
                const pendingMembers: datatypes.PendingGroupMember = getPendingMembers.call(this, itemPendingMembers);
                pendingMembersList.push(pendingMembers);
            }
            return pendingMembersList;
        }
        const pendingMembers: datatypes.PendingGroupMember[] = getPendingMembers.call(this, itemGroup);
        const updateInProgress: boolean = itemGroup['updateInProgress'] as boolean;
        const keycloakManaged: boolean = itemGroup['keycloakManaged'] as boolean;
        const name: string = itemGroup['name'] as string;
        const description: string = itemGroup['description'] as string;
        const hasAPhoto: boolean = itemGroup['hasAPhoto'] as boolean;
        return new datatypes.Group({
            id,
            type,
            advancedConfiguration,
            ownPermissions,
            members,
            pendingMembers,
            updateInProgress,
            keycloakManaged,
            name,
            description,
            hasAPhoto,
        });
    }
    const group: datatypes.Group = getGroup.call(this, index);
    const response: commands.GroupUpdateResponse = await client.stubs.groupCommandStub.groupUpdate({group});
    return this.helpers.returnJsonArray({id: Number(response?.group?.id), type: datatypes.Group_Type[response?.group?.type ?? 0], advancedConfiguration: {readOnly: response?.group?.advancedConfiguration?.readOnly, remoteDelete: datatypes.Group_AdvancedConfiguration_RemoteDelete[response?.group?.advancedConfiguration?.remoteDelete ?? 0]}, ownPermissions: {admin: response?.group?.ownPermissions?.admin, remoteDeleteAnything: response?.group?.ownPermissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: response?.group?.ownPermissions?.editOrRemoteDeleteOwnMessages, changeSettings: response?.group?.ownPermissions?.changeSettings, sendMessage: response?.group?.ownPermissions?.sendMessage}, members: response?.group?.members.map(e => ({contactId: Number(e.contactId), permissions: {admin: e.permissions?.admin, remoteDeleteAnything: e.permissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: e.permissions?.editOrRemoteDeleteOwnMessages, changeSettings: e.permissions?.changeSettings, sendMessage: e.permissions?.sendMessage}})), pendingMembers: response?.group?.pendingMembers.map(e => ({pendingMemberId: Number(e.pendingMemberId), contactId: Number(e.contactId), displayName: e.displayName, declined: e.declined, permissions: {admin: e.permissions?.admin, remoteDeleteAnything: e.permissions?.remoteDeleteAnything, editOrRemoteDeleteOwnMessages: e.permissions?.editOrRemoteDeleteOwnMessages, changeSettings: e.permissions?.changeSettings, sendMessage: e.permissions?.sendMessage}})), updateInProgress: response?.group?.updateInProgress, keycloakManaged: response?.group?.keycloakManaged, name: response?.group?.name, description: response?.group?.description, hasAPhoto: response?.group?.hasAPhoto});
}
