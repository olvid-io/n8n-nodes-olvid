// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
];

const displayOptions = {
  show: {
    resource: ['IdentityCommandService'],
    operation: ['IdentityGet'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    const response: commands.IdentityGetResponse = await client.stubs.identityCommandStub.identityGet({});
    return this.helpers.returnJsonArray({id: Number(response?.identity?.id), displayName: response?.identity?.displayName, details: {firstName: response?.identity?.details?.firstName, lastName: response?.identity?.details?.lastName, company: response?.identity?.details?.company, position: response?.identity?.details?.position}, invitationUrl: response?.identity?.invitationUrl, keycloakManaged: response?.identity?.keycloakManaged, hasAPhoto: response?.identity?.hasAPhoto, apiKey: {permission: {call: response?.identity?.apiKey?.permission?.call, multiDevice: response?.identity?.apiKey?.permission?.multiDevice}, expirationTimestamp: Number(response?.identity?.apiKey?.expirationTimestamp)}});
}
