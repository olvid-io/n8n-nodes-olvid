// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'ContactId',
    name: 'contactId',
    type: 'number',
    required: true,

    default: 0,
  },
];

const displayOptions = {
  show: {
    resource: ['ContactCommandService'],
    operation: ['ContactGet'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    const contactId: bigint = BigInt(this.getNodeParameter('contactId', index) as number);
    const response: commands.ContactGetResponse = await client.stubs.contactCommandStub.contactGet({contactId});
    return this.helpers.returnJsonArray({id: Number(response?.contact?.id), displayName: response?.contact?.displayName, details: {firstName: response?.contact?.details?.firstName, lastName: response?.contact?.details?.lastName, company: response?.contact?.details?.company, position: response?.contact?.details?.position}, establishedChannelCount: response?.contact?.establishedChannelCount, deviceCount: response?.contact?.deviceCount, hasOneToOneDiscussion: response?.contact?.hasOneToOneDiscussion, hasAPhoto: response?.contact?.hasAPhoto, keycloakManaged: response?.contact?.keycloakManaged});
}
