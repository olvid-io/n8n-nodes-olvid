// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Filter',
    name: 'filter',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Filter | Type',
        name: 'type',
        type: 'options',

        options: [
          { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
          { name: 'TYPE_OTO', value: 'TYPE_OTO' },
          { name: 'TYPE_GROUP', value: 'TYPE_GROUP' },
        ],
        default: 'TYPE_UNSPECIFIED',
      },
      {
        displayName: 'Filter | ContactId',
        name: 'identifierSelect',
        type: 'options',
        options: [
          { name: 'Select', value: 'undefined' },
          { name: 'contactId', value: 'contactId' },
          { name: 'groupId', value: 'groupId' },
        ],
        default: 'undefined',
      },
      {
        displayName: 'Filter | ContactId - ContactId',
        name: 'contactId',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Filter | ContactId - GroupId',
        name: 'groupId',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Filter | TitleSearch',
        name: 'titleSearch',
        type: 'string',


        default: '',
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['DiscussionCommandService'],
    operation: ['DiscussionList'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getFilter(this: IExecuteFunctions, index: number): datatypes.DiscussionFilter | undefined {
        const itemFilter = this.getNodeParameter('filter', index) as IDataObject | undefined;
        if (itemFilter === undefined) {
            return undefined;
        }
        function getType(this: IExecuteFunctions, itemDiscussionFilter: IDataObject): datatypes.DiscussionFilter_Type | undefined {
            const value: string | number | undefined = itemDiscussionFilter['type'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.DiscussionFilter_Type [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.DiscussionFilter_Type;
            }
            else {
                const enumKey = value.replace("TYPE_", "");
                return datatypes.DiscussionFilter_Type [enumKey as keyof typeof datatypes.DiscussionFilter_Type];
            }
        }
        const type: datatypes.DiscussionFilter_Type | undefined = getType.call(this, itemFilter);
        type identifierType =
            { value?: undefined, case: undefined } |
            { value: bigint, case: "contactId" } |
            { value: bigint, case: "groupId" };
        function getIdentifier(this: IExecuteFunctions, itemDiscussionFilter: IDataObject): identifierType {
            const selectedCase: string | undefined = itemDiscussionFilter['identifierSelect'] as string | undefined;
            if (selectedCase === undefined) {
                return { case: undefined };
            }

            if (selectedCase === "contactId") {
                const contactId: bigint = BigInt(itemDiscussionFilter['contactId'] as number);
                return { value: contactId, case: "contactId" };
            }
            if (selectedCase === "groupId") {
                const groupId: bigint = BigInt(itemDiscussionFilter['groupId'] as number);
                return { value: groupId, case: "groupId" };
            }
            return { case: undefined };
        }
        const identifier: identifierType | undefined = getIdentifier.call(this, itemFilter);
        const titleSearch: string | undefined = itemFilter['titleSearch'] ? itemFilter['titleSearch'] as string : undefined;
        return new datatypes.DiscussionFilter({
            type,
            titleSearch,
            identifier,
        });
    }
    const filter: datatypes.DiscussionFilter | undefined = getFilter.call(this, index);

    const containerMessage: commands.DiscussionListResponse = new commands.DiscussionListResponse();
    for await (const message of client.stubs.discussionCommandStub.discussionList({filter})) {
        containerMessage.discussions.push(...message.discussions);
    }

    return this.helpers.returnJsonArray(containerMessage?.discussions.map(e => ({id: Number(e.id), title: e.title, contactId: e.identifier.case === 'contactId' ? Number(e.identifier.value) : undefined, groupId: e.identifier.case === 'groupId' ? Number(e.identifier.value) : undefined}))
);
}
