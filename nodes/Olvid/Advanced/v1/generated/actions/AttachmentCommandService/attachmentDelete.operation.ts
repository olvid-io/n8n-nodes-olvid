// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'AttachmentId',
    name: 'attachmentId',
    type: 'collection',
    default: {
      type: 'TYPE_UNSPECIFIED',
      id: 0,
    },
    options: [
      {
        displayName: 'AttachmentId | Type',
        name: 'type',
        type: 'options',

        options: [
          { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
          { name: 'TYPE_INBOUND', value: 'TYPE_INBOUND' },
          { name: 'TYPE_OUTBOUND', value: 'TYPE_OUTBOUND' },
        ],
        default: 'TYPE_UNSPECIFIED',
      },
      {
        displayName: 'AttachmentId | Id',
        name: 'id',
        type: 'number',


        default: 0,
      },
    ],
  },
  {
    displayName: 'DeleteEverywhere',
    name: 'deleteEverywhere',
    type: 'boolean',
    required: false,

    default: false,
  },
];

const displayOptions = {
  show: {
    resource: ['AttachmentCommandService'],
    operation: ['AttachmentDelete'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getAttachmentId(this: IExecuteFunctions, index: number): datatypes.AttachmentId {
        const itemAttachmentId = this.getNodeParameter('attachmentId', index) as IDataObject;
        function getType(this: IExecuteFunctions, itemAttachmentId: IDataObject): datatypes.AttachmentId_Type {
            const value: string | number = itemAttachmentId['type'] as string | number;

            if (typeof value == 'number') {
                if (datatypes.AttachmentId_Type [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.AttachmentId_Type;
            }
            else {
                const enumKey = value.replace("TYPE_", "");
                return datatypes.AttachmentId_Type [enumKey as keyof typeof datatypes.AttachmentId_Type];
            }
        }
        const type: datatypes.AttachmentId_Type = getType.call(this, itemAttachmentId);
        const id: bigint = BigInt(itemAttachmentId['id'] as number);
        return new datatypes.AttachmentId({
            type,
            id,
        });
    }
    const attachmentId: datatypes.AttachmentId = getAttachmentId.call(this, index);
    const deleteEverywhere: boolean | undefined = this.getNodeParameter('deleteEverywhere', index) ? this.getNodeParameter('deleteEverywhere', index) as boolean : undefined;
    const response: commands.AttachmentDeleteResponse = await client.stubs.attachmentCommandStub.attachmentDelete({attachmentId, deleteEverywhere});
    return this.helpers.returnJsonArray({});
}
