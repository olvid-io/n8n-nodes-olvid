// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Filter',
    name: 'filter',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Filter | Type',
        name: 'type',
        type: 'options',

        options: [
          { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
          { name: 'TYPE_INBOUND', value: 'TYPE_INBOUND' },
          { name: 'TYPE_OUTBOUND', value: 'TYPE_OUTBOUND' },
        ],
        default: 'TYPE_UNSPECIFIED',
      },
      {
        displayName: 'Filter | FileType',
        name: 'fileType',
        type: 'options',

        options: [
          { name: 'FILE_TYPE_UNSPECIFIED', value: 'FILE_TYPE_UNSPECIFIED' },
          { name: 'FILE_TYPE_IMAGE', value: 'FILE_TYPE_IMAGE' },
          { name: 'FILE_TYPE_VIDEO', value: 'FILE_TYPE_VIDEO' },
          { name: 'FILE_TYPE_IMAGE_VIDEO', value: 'FILE_TYPE_IMAGE_VIDEO' },
          { name: 'FILE_TYPE_AUDIO', value: 'FILE_TYPE_AUDIO' },
          { name: 'FILE_TYPE_LINK_PREVIEW', value: 'FILE_TYPE_LINK_PREVIEW' },
          { name: 'FILE_TYPE_NOT_LINK_PREVIEW', value: 'FILE_TYPE_NOT_LINK_PREVIEW' },
        ],
        default: 'FILE_TYPE_UNSPECIFIED',
      },
      {
        displayName: 'Filter | DiscussionId',
        name: 'discussionId',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Filter | MessageId',
        name: 'messageId',
        type: 'collection',
        default: {
        },
        options: [
          {
            displayName: 'Filter | MessageId| Type',
            name: 'type',
            type: 'options',

            options: [
              { name: 'TYPE_UNSPECIFIED', value: 'TYPE_UNSPECIFIED' },
              { name: 'TYPE_INBOUND', value: 'TYPE_INBOUND' },
              { name: 'TYPE_OUTBOUND', value: 'TYPE_OUTBOUND' },
            ],
            default: 'TYPE_UNSPECIFIED',
          },
          {
            displayName: 'Filter | MessageId| Id',
            name: 'id',
            type: 'number',


            default: 0,
          },
        ],
      },
      {
        displayName: 'Filter | FilenameSearch',
        name: 'filenameSearch',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Filter | MimeTypeSearch',
        name: 'mimeTypeSearch',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Filter | MinSize',
        name: 'minSize',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Filter | MaxSize',
        name: 'maxSize',
        type: 'number',


        default: 0,
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['AttachmentCommandService'],
    operation: ['AttachmentList'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    function getFilter(this: IExecuteFunctions, index: number): datatypes.AttachmentFilter | undefined {
        const itemFilter = this.getNodeParameter('filter', index) as IDataObject | undefined;
        if (itemFilter === undefined) {
            return undefined;
        }
        function getType(this: IExecuteFunctions, itemAttachmentFilter: IDataObject): datatypes.AttachmentId_Type | undefined {
            const value: string | number | undefined = itemAttachmentFilter['type'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.AttachmentId_Type [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.AttachmentId_Type;
            }
            else {
                const enumKey = value.replace("TYPE_", "");
                return datatypes.AttachmentId_Type [enumKey as keyof typeof datatypes.AttachmentId_Type];
            }
        }
        const type: datatypes.AttachmentId_Type | undefined = getType.call(this, itemFilter);
        function getFileType(this: IExecuteFunctions, itemAttachmentFilter: IDataObject): datatypes.AttachmentFilter_FileType | undefined {
            const value: string | number | undefined = itemAttachmentFilter['fileType'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.AttachmentFilter_FileType [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.AttachmentFilter_FileType;
            }
            else {
                const enumKey = value.replace("FILETYPE_", "");
                return datatypes.AttachmentFilter_FileType [enumKey as keyof typeof datatypes.AttachmentFilter_FileType];
            }
        }
        const fileType: datatypes.AttachmentFilter_FileType | undefined = getFileType.call(this, itemFilter);
        const discussionId: bigint | undefined = itemFilter['discussionId'] ? BigInt(itemFilter['discussionId'] as number) : undefined;
        function getMessageId(this: IExecuteFunctions, itemAttachmentFilter: IDataObject): datatypes.MessageId | undefined {
            const itemMessageId = itemAttachmentFilter['messageId'] as IDataObject | undefined;
            if (itemMessageId === undefined) {
                return undefined;
            }
            function getType(this: IExecuteFunctions, itemMessageId: IDataObject): datatypes.MessageId_Type | undefined {
                const value: string | number | undefined = itemMessageId['type'] as string | number | undefined;
                if (value === undefined) {
                    return undefined;
                }
                if (typeof value == 'number') {
                    if (datatypes.MessageId_Type [value] === undefined) {
                        throw new Error('The attachment type "${value}" is not known.');
                    }
                    return value as datatypes.MessageId_Type;
                }
                else {
                    const enumKey = value.replace("TYPE_", "");
                    return datatypes.MessageId_Type [enumKey as keyof typeof datatypes.MessageId_Type];
                }
            }
            const type: datatypes.MessageId_Type | undefined = getType.call(this, itemMessageId);
            const id: bigint | undefined = itemMessageId['id'] ? BigInt(itemMessageId['id'] as number) : undefined;
            return new datatypes.MessageId({
                type,
                id,
            });
        }
        const messageId: datatypes.MessageId | undefined = getMessageId.call(this, itemFilter);
        const filenameSearch: string | undefined = itemFilter['filenameSearch'] ? itemFilter['filenameSearch'] as string : undefined;
        const mimeTypeSearch: string | undefined = itemFilter['mimeTypeSearch'] ? itemFilter['mimeTypeSearch'] as string : undefined;
        const minSize: bigint | undefined = itemFilter['minSize'] ? BigInt(itemFilter['minSize'] as number) : undefined;
        const maxSize: bigint | undefined = itemFilter['maxSize'] ? BigInt(itemFilter['maxSize'] as number) : undefined;
        return new datatypes.AttachmentFilter({
            type,
            fileType,
            discussionId,
            messageId,
            filenameSearch,
            mimeTypeSearch,
            minSize,
            maxSize,
        });
    }
    const filter: datatypes.AttachmentFilter | undefined = getFilter.call(this, index);

    const containerMessage: commands.AttachmentListResponse = new commands.AttachmentListResponse();
    for await (const message of client.stubs.attachmentCommandStub.attachmentList({filter})) {
        containerMessage.attachments.push(...message.attachments);
    }

    return this.helpers.returnJsonArray(containerMessage?.attachments.map(e => ({id: {type: datatypes.AttachmentId_Type[e.id?.type ?? 0], id: Number(e.id?.id)}, discussionId: Number(e.discussionId), messageId: {type: datatypes.MessageId_Type[e.messageId?.type ?? 0], id: Number(e.messageId?.id)}, fileName: e.fileName, mimeType: e.mimeType, size: Number(e.size)}))
);
}
