// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/command_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidClient, commands } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'DiscussionId',
    name: 'discussionId',
    type: 'number',
    required: true,

    default: 0,
  },
  {
    displayName: 'Latitude',
    name: 'latitude',
    type: 'number',
    required: true,

    default: 0,
  },
  {
    displayName: 'Longitude',
    name: 'longitude',
    type: 'number',
    required: true,

    default: 0,
  },
  {
    displayName: 'Altitude',
    name: 'altitude',
    type: 'number',
    required: false,

    default: 0,
  },
  {
    displayName: 'Precision',
    name: 'precision',
    type: 'number',
    required: false,

    default: 0,
  },
  {
    displayName: 'Address',
    name: 'address',
    type: 'string',
    required: false,

    default: '',
  },
  {
    displayName: 'PreviewFilename',
    name: 'previewFilename',
    type: 'string',
    required: false,

    default: '',
  },
  {
    displayName: 'PreviewPayload',
    name: 'previewPayload',
    type: 'string',
    required: false,

    default: '',
  },
  {
    displayName: 'Ephemerality',
    name: 'ephemerality',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Ephemerality | ReadOnce',
        name: 'readOnce',
        type: 'boolean',


        default: false,
      },
      {
        displayName: 'Ephemerality | ExistenceDuration',
        name: 'existenceDuration',
        type: 'number',


        default: 0,
      },
      {
        displayName: 'Ephemerality | VisibilityDuration',
        name: 'visibilityDuration',
        type: 'number',


        default: 0,
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['MessageCommandService'],
    operation: ['MessageSendLocation'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidClient): Promise<INodeExecutionData[]> {
    const discussionId: bigint = BigInt(this.getNodeParameter('discussionId', index) as number);
    const latitude: number = this.getNodeParameter('latitude', index) as number;
    const longitude: number = this.getNodeParameter('longitude', index) as number;
    const altitude: number | undefined = this.getNodeParameter('altitude', index) ? this.getNodeParameter('altitude', index) as number : undefined;
    const precision: number | undefined = this.getNodeParameter('precision', index) ? this.getNodeParameter('precision', index) as number : undefined;
    const address: string | undefined = this.getNodeParameter('address', index) ? this.getNodeParameter('address', index) as string : undefined;
    const previewFilename: string | undefined = this.getNodeParameter('previewFilename', index) ? this.getNodeParameter('previewFilename', index) as string : undefined;
    const previewPayload: Uint8Array | undefined = this.getNodeParameter('previewPayload', index) ? undefined : undefined;
    function getEphemerality(this: IExecuteFunctions, index: number): datatypes.MessageEphemerality | undefined {
        const itemEphemerality = this.getNodeParameter('ephemerality', index) as IDataObject | undefined;
        if (itemEphemerality === undefined) {
            return undefined;
        }
        const readOnce: boolean | undefined = itemEphemerality['readOnce'] ? itemEphemerality['readOnce'] as boolean : undefined;
        const existenceDuration: bigint | undefined = itemEphemerality['existenceDuration'] ? BigInt(itemEphemerality['existenceDuration'] as number) : undefined;
        const visibilityDuration: bigint | undefined = itemEphemerality['visibilityDuration'] ? BigInt(itemEphemerality['visibilityDuration'] as number) : undefined;
        return new datatypes.MessageEphemerality({
            readOnce,
            existenceDuration,
            visibilityDuration,
        });
    }
    const ephemerality: datatypes.MessageEphemerality | undefined = getEphemerality.call(this, index);
    const response: commands.MessageSendLocationResponse = await client.stubs.messageCommandStub.messageSendLocation({discussionId, latitude, longitude, altitude, precision, address, previewFilename, previewPayload, ephemerality});
    return this.helpers.returnJsonArray({id: {type: datatypes.MessageId_Type[response?.message?.id?.type ?? 0], id: Number(response?.message?.id?.id)}, discussionId: Number(response?.message?.discussionId), senderId: Number(response?.message?.senderId), body: response?.message?.body, sortIndex: response?.message?.sortIndex, timestamp: Number(response?.message?.timestamp), attachmentsCount: Number(response?.message?.attachmentsCount), repliedMessageId: {type: datatypes.MessageId_Type[response?.message?.repliedMessageId?.type ?? 0], id: Number(response?.message?.repliedMessageId?.id)}, messageLocation: {type: datatypes.MessageLocation_LocationType[response?.message?.messageLocation?.type ?? 0], timestamp: Number(response?.message?.messageLocation?.timestamp), latitude: response?.message?.messageLocation?.latitude, longitude: response?.message?.messageLocation?.longitude, altitude: response?.message?.messageLocation?.altitude, precision: response?.message?.messageLocation?.precision, address: response?.message?.messageLocation?.address}, reactions: response?.message?.reactions.map(e => ({contactId: Number(e.contactId), reaction: e.reaction, timestamp: Number(e.timestamp)})), forwarded: response?.message?.forwarded, editedBody: response?.message?.editedBody});
}
