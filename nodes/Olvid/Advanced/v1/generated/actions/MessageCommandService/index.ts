// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"

import type { INodeProperties } from 'n8n-workflow';
import * as MessageList from './messageList.operation';
import * as MessageGet from './messageGet.operation';
import * as MessageRefresh from './messageRefresh.operation';
import * as MessageDelete from './messageDelete.operation';
import * as MessageSend from './messageSend.operation';
import * as MessageSendWithAttachments from './messageSendWithAttachments.operation';
import * as MessageSendLocation from './messageSendLocation.operation';
import * as MessageStartLocationSharing from './messageStartLocationSharing.operation';
import * as MessageUpdateLocationSharing from './messageUpdateLocationSharing.operation';
import * as MessageEndLocationSharing from './messageEndLocationSharing.operation';
import * as MessageReact from './messageReact.operation';
import * as MessageUpdateBody from './messageUpdateBody.operation';
import * as MessageSendVoip from './messageSendVoip.operation';

export { MessageList, MessageGet, MessageRefresh, MessageDelete, MessageSend, MessageSendWithAttachments, MessageSendLocation, MessageStartLocationSharing, MessageUpdateLocationSharing, MessageEndLocationSharing, MessageReact, MessageUpdateBody, MessageSendVoip};

export const descriptions: INodeProperties[] = [
  {
    displayName: 'Operation',
    name: 'operation',
    type: 'options',
    noDataExpression: true,
    displayOptions: {
      show: {
        resource: ['MessageCommandService'],
      },
    },
    // eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items
    options: [
      {
        name: 'MessageList',
        value: 'MessageList',
        action: 'Message list',
      },
      {
        name: 'MessageGet',
        value: 'MessageGet',
        action: 'Message get',
      },
      {
        name: 'MessageRefresh',
        value: 'MessageRefresh',
        action: 'Message refresh',
      },
      {
        name: 'MessageDelete',
        value: 'MessageDelete',
        action: 'Message delete',
      },
      {
        name: 'MessageSend',
        value: 'MessageSend',
        action: 'Message send',
      },
      {
        name: 'MessageSendWithAttachments',
        value: 'MessageSendWithAttachments',
        action: 'Message send with attachments',
      },
      {
        name: 'MessageSendLocation',
        value: 'MessageSendLocation',
        action: 'Message send location',
      },
      {
        name: 'MessageStartLocationSharing',
        value: 'MessageStartLocationSharing',
        action: 'Message start location sharing',
      },
      {
        name: 'MessageUpdateLocationSharing',
        value: 'MessageUpdateLocationSharing',
        action: 'Message update location sharing',
      },
      {
        name: 'MessageEndLocationSharing',
        value: 'MessageEndLocationSharing',
        action: 'Message end location sharing',
      },
      {
        name: 'MessageReact',
        value: 'MessageReact',
        action: 'Message react',
      },
      {
        name: 'MessageUpdateBody',
        value: 'MessageUpdateBody',
        action: 'Message update body',
      },
      {
        name: 'MessageSendVoip',
        value: 'MessageSendVoip',
        action: 'Message send voip',
      },
    ],
    default: 'MessageList',
  },
  ...MessageList.description,
  ...MessageGet.description,
  ...MessageRefresh.description,
  ...MessageDelete.description,
  ...MessageSend.description,
  ...MessageSendWithAttachments.description,
  ...MessageSendLocation.description,
  ...MessageStartLocationSharing.description,
  ...MessageUpdateLocationSharing.description,
  ...MessageEndLocationSharing.description,
  ...MessageReact.description,
  ...MessageUpdateBody.description,
  ...MessageSendVoip.description,
];
