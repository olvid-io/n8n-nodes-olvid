// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/admin_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidAdminClient, admin } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'Filter',
    name: 'filter',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'Filter | Keycloak',
        name: 'keycloak',
        type: 'options',

        options: [
          { name: 'KEYCLOAK_UNSPECIFIED', value: 'KEYCLOAK_UNSPECIFIED' },
          { name: 'KEYCLOAK_IS', value: 'KEYCLOAK_IS' },
          { name: 'KEYCLOAK_IS_NOT', value: 'KEYCLOAK_IS_NOT' },
        ],
        default: 'KEYCLOAK_UNSPECIFIED',
      },
      {
        displayName: 'Filter | Photo',
        name: 'photo',
        type: 'options',

        options: [
          { name: 'PHOTO_UNSPECIFIED', value: 'PHOTO_UNSPECIFIED' },
          { name: 'PHOTO_HAS', value: 'PHOTO_HAS' },
          { name: 'PHOTO_HAS_NOT', value: 'PHOTO_HAS_NOT' },
        ],
        default: 'PHOTO_UNSPECIFIED',
      },
      {
        displayName: 'Filter | ApiKey',
        name: 'apiKey',
        type: 'options',

        options: [
          { name: 'API_KEY_UNSPECIFIED', value: 'API_KEY_UNSPECIFIED' },
          { name: 'API_KEY_HAS', value: 'API_KEY_HAS' },
          { name: 'API_KEY_HAS_NOT', value: 'API_KEY_HAS_NOT' },
        ],
        default: 'API_KEY_UNSPECIFIED',
      },
      {
        displayName: 'Filter | DisplayNameSearch',
        name: 'displayNameSearch',
        type: 'string',


        default: '',
      },
      {
        displayName: 'Filter | DetailsSearch',
        name: 'detailsSearch',
        type: 'collection',
        default: {
        },
        options: [
          {
            displayName: 'Filter | DetailsSearch| FirstName',
            name: 'firstName',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| LastName',
            name: 'lastName',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| Company',
            name: 'company',
            type: 'string',


            default: '',
          },
          {
            displayName: 'Filter | DetailsSearch| Position',
            name: 'position',
            type: 'string',


            default: '',
          },
        ],
      },
    ],
  },
];

const displayOptions = {
  show: {
    resource: ['IdentityAdminService'],
    operation: ['IdentityList'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidAdminClient): Promise<INodeExecutionData[]> {
    function getFilter(this: IExecuteFunctions, index: number): datatypes.IdentityFilter | undefined {
        const itemFilter = this.getNodeParameter('filter', index) as IDataObject | undefined;
        if (itemFilter === undefined) {
            return undefined;
        }
        function getKeycloak(this: IExecuteFunctions, itemIdentityFilter: IDataObject): datatypes.IdentityFilter_Keycloak | undefined {
            const value: string | number | undefined = itemIdentityFilter['keycloak'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.IdentityFilter_Keycloak [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.IdentityFilter_Keycloak;
            }
            else {
                const enumKey = value.replace("KEYCLOAK_", "");
                return datatypes.IdentityFilter_Keycloak [enumKey as keyof typeof datatypes.IdentityFilter_Keycloak];
            }
        }
        const keycloak: datatypes.IdentityFilter_Keycloak | undefined = getKeycloak.call(this, itemFilter);
        function getPhoto(this: IExecuteFunctions, itemIdentityFilter: IDataObject): datatypes.IdentityFilter_Photo | undefined {
            const value: string | number | undefined = itemIdentityFilter['photo'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.IdentityFilter_Photo [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.IdentityFilter_Photo;
            }
            else {
                const enumKey = value.replace("PHOTO_", "");
                return datatypes.IdentityFilter_Photo [enumKey as keyof typeof datatypes.IdentityFilter_Photo];
            }
        }
        const photo: datatypes.IdentityFilter_Photo | undefined = getPhoto.call(this, itemFilter);
        function getApiKey(this: IExecuteFunctions, itemIdentityFilter: IDataObject): datatypes.IdentityFilter_ApiKey | undefined {
            const value: string | number | undefined = itemIdentityFilter['apiKey'] as string | number | undefined;
            if (value === undefined) {
                return undefined;
            }
            if (typeof value == 'number') {
                if (datatypes.IdentityFilter_ApiKey [value] === undefined) {
                    throw new Error('The attachment type "${value}" is not known.');
                }
                return value as datatypes.IdentityFilter_ApiKey;
            }
            else {
                const enumKey = value.replace("APIKEY_", "");
                return datatypes.IdentityFilter_ApiKey [enumKey as keyof typeof datatypes.IdentityFilter_ApiKey];
            }
        }
        const apiKey: datatypes.IdentityFilter_ApiKey | undefined = getApiKey.call(this, itemFilter);
        const displayNameSearch: string | undefined = itemFilter['displayNameSearch'] ? itemFilter['displayNameSearch'] as string : undefined;
        function getDetailsSearch(this: IExecuteFunctions, itemIdentityFilter: IDataObject): datatypes.IdentityDetails | undefined {
            const itemDetailsSearch = itemIdentityFilter['detailsSearch'] as IDataObject | undefined;
            if (itemDetailsSearch === undefined) {
                return undefined;
            }
            const firstName: string | undefined = itemDetailsSearch['firstName'] ? itemDetailsSearch['firstName'] as string : undefined;
            const lastName: string | undefined = itemDetailsSearch['lastName'] ? itemDetailsSearch['lastName'] as string : undefined;
            const company: string | undefined = itemDetailsSearch['company'] ? itemDetailsSearch['company'] as string : undefined;
            const position: string | undefined = itemDetailsSearch['position'] ? itemDetailsSearch['position'] as string : undefined;
            return new datatypes.IdentityDetails({
                firstName,
                lastName,
                company,
                position,
            });
        }
        const detailsSearch: datatypes.IdentityDetails | undefined = getDetailsSearch.call(this, itemFilter);
        return new datatypes.IdentityFilter({
            keycloak,
            photo,
            apiKey,
            displayNameSearch,
            detailsSearch,
        });
    }
    const filter: datatypes.IdentityFilter | undefined = getFilter.call(this, index);

    const containerMessage: admin.IdentityListResponse = new admin.IdentityListResponse();
    for await (const message of client.adminStubs.identityAdminStub.identityList({filter})) {
        containerMessage.identities.push(...message.identities);
    }

    return this.helpers.returnJsonArray(containerMessage?.identities.map(e => ({id: Number(e.id), displayName: e.displayName, details: {firstName: e.details?.firstName, lastName: e.details?.lastName, company: e.details?.company, position: e.details?.position}, invitationUrl: e.invitationUrl, keycloakManaged: e.keycloakManaged, hasAPhoto: e.hasAPhoto, apiKey: {permission: {call: e.apiKey?.permission?.call, multiDevice: e.apiKey?.permission?.multiDevice}, expirationTimestamp: Number(e.apiKey?.expirationTimestamp)}}))
);
}
