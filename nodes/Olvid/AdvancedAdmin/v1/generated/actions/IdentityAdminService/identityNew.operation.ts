// @generated by protoc-gen-n8n-actions v1 with parameter "target=ts"
// @generated from file olvid/daemon/services/v1/admin_service.proto (package olvid.daemon.services.v1, syntax proto3)
/* eslint-disable */

import { type IExecuteFunctions, type INodeExecutionData, type IDataObject, type INodeProperties, updateDisplayOptions } from 'n8n-workflow';

// noinspection ES6UnusedImports
import { datatypes, OlvidAdminClient, admin } from '@olvid/bot-node';

const properties: INodeProperties[] = [
  {
    displayName: 'IdentityDetails',
    name: 'identityDetails',
    type: 'collection',
    default: {
    },
    options: [
      {
        displayName: 'IdentityDetails | FirstName',
        name: 'firstName',
        type: 'string',


        default: '',
      },
      {
        displayName: 'IdentityDetails | LastName',
        name: 'lastName',
        type: 'string',


        default: '',
      },
      {
        displayName: 'IdentityDetails | Company',
        name: 'company',
        type: 'string',


        default: '',
      },
      {
        displayName: 'IdentityDetails | Position',
        name: 'position',
        type: 'string',


        default: '',
      },
    ],
  },
  {
    displayName: 'ServerUrl',
    name: 'serverUrl',
    type: 'string',
    required: false,

    default: '',
  },
  {
    displayName: 'ApiKey',
    name: 'apiKey',
    type: 'string',
    required: false,

    default: '',
  },
];

const displayOptions = {
  show: {
    resource: ['IdentityAdminService'],
    operation: ['IdentityNew'],
  },
};

export const description = updateDisplayOptions(displayOptions, properties);

export async function execute(this: IExecuteFunctions, index: number, client: OlvidAdminClient): Promise<INodeExecutionData[]> {
    function getIdentityDetails(this: IExecuteFunctions, index: number): datatypes.IdentityDetails {
        const itemIdentityDetails = this.getNodeParameter('identityDetails', index) as IDataObject;
        const firstName: string | undefined = itemIdentityDetails['firstName'] ? itemIdentityDetails['firstName'] as string : undefined;
        const lastName: string | undefined = itemIdentityDetails['lastName'] ? itemIdentityDetails['lastName'] as string : undefined;
        const company: string | undefined = itemIdentityDetails['company'] ? itemIdentityDetails['company'] as string : undefined;
        const position: string | undefined = itemIdentityDetails['position'] ? itemIdentityDetails['position'] as string : undefined;
        return new datatypes.IdentityDetails({
            firstName,
            lastName,
            company,
            position,
        });
    }
    const identityDetails: datatypes.IdentityDetails = getIdentityDetails.call(this, index);
    const serverUrl: string | undefined = this.getNodeParameter('serverUrl', index) ? this.getNodeParameter('serverUrl', index) as string : undefined;
    const apiKey: string | undefined = this.getNodeParameter('apiKey', index) ? this.getNodeParameter('apiKey', index) as string : undefined;
    const response: admin.IdentityNewResponse = await client.adminStubs.identityAdminStub.identityNew({identityDetails, serverUrl, apiKey});
    return this.helpers.returnJsonArray({id: Number(response?.identity?.id), displayName: response?.identity?.displayName, details: {firstName: response?.identity?.details?.firstName, lastName: response?.identity?.details?.lastName, company: response?.identity?.details?.company, position: response?.identity?.details?.position}, invitationUrl: response?.identity?.invitationUrl, keycloakManaged: response?.identity?.keycloakManaged, hasAPhoto: response?.identity?.hasAPhoto, apiKey: {permission: {call: response?.identity?.apiKey?.permission?.call, multiDevice: response?.identity?.apiKey?.permission?.multiDevice}, expirationTimestamp: Number(response?.identity?.apiKey?.expirationTimestamp)}});
}
